// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // Use DATABASE_URL (not DB_URL) so it works with Next/Vercel envs
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  email          String?  @unique
  name           String?
  emailVerified  DateTime?
  image          String?
  role           String   @default("user")
  passwordHash   String?

  // NextAuth relations
  accounts       Account[]
  sessions       Session[]
  // Metrics / devices
  logins         LoginEvent[]
  sessionMetrics SessionMetric[]
  pageViews      PageView[]
  devices        Device[]

  // Optional per-user device cap (NULL = use global env cap)
  deviceLimit    Int?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/* ───── Metrics & Devices ───── */

model LoginEvent {
  id         String   @id @default(cuid())
  userId     String
  loginAt    DateTime @default(now())
  isNewUser  Boolean  @default(false)
  ip         String?
  userAgent  String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId, loginAt])
}

model SessionMetric {
  id         String   @id @default(cuid())
  userId     String
  sessionId  String
  firstSeen  DateTime @default(now())
  lastSeen   DateTime @default(now())
  pageCount  Int      @default(0)
  durationS  Int      @default(0)
  lastPath   String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId, sessionId])
  @@index([userId, lastSeen])
}

model PageView {
  id         String   @id @default(cuid())
  userId     String
  sessionId  String
  path       String
  ts         DateTime @default(now())
  referrer   String?
  deviceId   String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId, ts])
}

model Device {
  id        String   @id @default(cuid())
  userId    String
  deviceId  String
  firstSeen DateTime @default(now())
  lastSeen  DateTime @default(now())
  userAgent String?
  ip        String?
  platform  String?
  browser   String?
  isMobile  Boolean?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId, deviceId])
  @@index([userId, lastSeen])
}
